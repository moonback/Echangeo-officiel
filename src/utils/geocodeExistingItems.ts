// Utilitaire pour g√©ocoder les items existants qui n'ont pas de coordonn√©es
import { supabase } from '../services/supabase';
import { geocodeWithRetry, cleanAddress } from './geocoding';

/**
 * G√©ocode tous les items qui ont un location_hint mais pas de coordonn√©es
 */
export async function geocodeExistingItems() {
  console.log('üîÑ Recherche des items √† g√©ocoder...');
  
  try {
    // R√©cup√©rer les items sans coordonn√©es mais avec location_hint
    const { data: items, error } = await supabase
      .from('items')
      .select('id, title, location_hint, latitude, longitude')
      .or('latitude.is.null,longitude.is.null')
      .not('location_hint', 'is', null);

    if (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des items:', error);
      return { success: false, error: error.message };
    }

    if (!items || items.length === 0) {
      console.log('‚úÖ Aucun item √† g√©ocoder trouv√©');
      return { success: true, processed: 0 };
    }

    console.log(`üìç ${items.length} items √† g√©ocoder trouv√©s`);

    let successCount = 0;
    let errorCount = 0;

    for (const item of items) {
      try {
        console.log(`üîÑ G√©ocodage de: ${item.title} (${item.location_hint})`);
        
        const cleanedAddress = cleanAddress(item.location_hint!);
        const geocodeResult = await geocodeWithRetry(cleanedAddress);
        
        if (geocodeResult) {
          // Mettre √† jour l'item avec les coordonn√©es
          const { error: updateError } = await supabase
            .from('items')
            .update({
              latitude: geocodeResult.latitude,
              longitude: geocodeResult.longitude,
              updated_at: new Date().toISOString()
            })
            .eq('id', item.id);

          if (updateError) {
            console.error(`‚ùå Erreur lors de la mise √† jour de ${item.title}:`, updateError);
            errorCount++;
          } else {
            console.log(`‚úÖ G√©ocodage r√©ussi pour ${item.title}:`, {
              coordinates: [geocodeResult.longitude, geocodeResult.latitude],
              confidence: geocodeResult.confidence
            });
            successCount++;
          }
        } else {
          console.warn(`‚ö†Ô∏è G√©ocodage √©chou√© pour ${item.title}`);
          errorCount++;
        }

        // Pause entre les requ√™tes pour √©viter de surcharger l'API
        await new Promise(resolve => setTimeout(resolve, 1000));
        
      } catch (error) {
        console.error(`‚ùå Erreur lors du g√©ocodage de ${item.title}:`, error);
        errorCount++;
      }
    }

    console.log(`‚úÖ G√©ocodage termin√©: ${successCount} succ√®s, ${errorCount} √©checs`);
    
    return {
      success: true,
      processed: items.length,
      successCount,
      errorCount
    };

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale lors du g√©ocodage:', error);
    return { success: false, error: error instanceof Error ? error.message : 'Erreur inconnue' };
  }
}

/**
 * G√©ocode un item sp√©cifique par son ID
 */
export async function geocodeItem(itemId: string) {
  console.log(`üîÑ G√©ocodage de l'item ${itemId}...`);
  
  try {
    // R√©cup√©rer l'item
    const { data: item, error: fetchError } = await supabase
      .from('items')
      .select('id, title, location_hint, latitude, longitude')
      .eq('id', itemId)
      .single();

    if (fetchError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de l\'item:', fetchError);
      return { success: false, error: fetchError.message };
    }

    if (!item.location_hint) {
      console.warn('‚ö†Ô∏è L\'item n\'a pas de location_hint');
      return { success: false, error: 'Pas de location_hint' };
    }

    if (item.latitude && item.longitude) {
      console.log('‚úÖ L\'item a d√©j√† des coordonn√©es');
      return { success: true, alreadyGeocoded: true };
    }

    // G√©ocoder l'item
    const cleanedAddress = cleanAddress(item.location_hint);
    const geocodeResult = await geocodeWithRetry(cleanedAddress);
    
    if (!geocodeResult) {
      console.warn('‚ö†Ô∏è G√©ocodage √©chou√©');
      return { success: false, error: 'G√©ocodage √©chou√©' };
    }

    // Mettre √† jour l'item
    const { error: updateError } = await supabase
      .from('items')
      .update({
        latitude: geocodeResult.latitude,
        longitude: geocodeResult.longitude,
        updated_at: new Date().toISOString()
      })
      .eq('id', itemId);

    if (updateError) {
      console.error('‚ùå Erreur lors de la mise √† jour:', updateError);
      return { success: false, error: updateError.message };
    }

    console.log('‚úÖ G√©ocodage r√©ussi:', {
      item: item.title,
      coordinates: [geocodeResult.longitude, geocodeResult.latitude],
      confidence: geocodeResult.confidence
    });

    return {
      success: true,
      coordinates: {
        latitude: geocodeResult.latitude,
        longitude: geocodeResult.longitude
      },
      confidence: geocodeResult.confidence
    };

  } catch (error) {
    console.error('‚ùå Erreur lors du g√©ocodage:', error);
    return { success: false, error: error instanceof Error ? error.message : 'Erreur inconnue' };
  }
}
